# Riftbound Card Learning System

A comprehensive web-based learning system for Riftbound TCG cards featuring automated card scraping, database management, and three interactive learning modes.

## System Overview

The Riftbound Learning System consists of:
1. **Playwright Scraper** (`riftbound_scraper.py`) - High-performance card scraper
2. **Flask Server** (`riftbound_server.py`) - API bridge between scraper and web app
3. **Web Application** (`index.html`) - Interactive learning interface with three modes

## Features

### Learning Modes
1. **📖 Self Learn Mode** - Click cards to reveal/hide descriptions
2. **🎯 Name Quiz Mode** - Type card names with the name hidden
3. **💎 Cost Quiz Mode** - Guess card costs (requires cost data)

### Card Management
- **Automatic Scraping** - One-click card database updates
- **Smart UI** - Scraper interface auto-hides when cards are loaded
- **Hide Setup Button** - Manually hide the scraper section after updating cards
- **Color Filtering** - Filter by any of the 6 game colors
- **Multi-color Control** - Option to exclude multi-color cards
- **Progress Tracking** - Track mastered cards per session

### Performance Features
- **Playwright-based scraping** - 2-3x faster than Selenium
- **Smart scrolling** - Efficiently loads lazy-loaded content
- **Debug mode** - Detailed logging for troubleshooting
- **Headless operation** - Fast, background scraping

## Installation

### Prerequisites

1. Python 3.7 or higher
2. pip (Python package manager)

### Required Python Packages

```bash
# Install all dependencies
pip install flask flask-cors playwright

# Install Playwright browsers (only needed once)
playwright install chromium
```

## File Structure

```
riftbound-quiz/
├── riftbound_scraper.py    # Playwright-based card scraper
├── riftbound_server.py      # Flask API server
├── index.html               # Web application (all three modes)
└── riftbound_cards.json     # Generated card database
```

## Quick Start

### 1. Start the Flask Server

```bash
python riftbound_server.py
```

You should see:
```
🎮 Riftbound Flask Server
==================================================
Starting server on http://localhost:5000
```

### 2. Open the Web App

Navigate to http://localhost:5000 in your browser

### 3. Load Cards

**First Time:**
- Click "🚀 Start Automatic Scraping"
- Wait 30-60 seconds for scraping to complete
- Cards auto-load when ready

**Returning User:**
- Click "🔄 Check for Existing Cards"
- Cards load instantly if database exists

### 4. Start Learning!

Choose your learning mode and begin practicing

## Usage Guide

### Interface Controls

#### Card Setup Section
- **🚀 Start Automatic Scraping** - Runs the scraper to get latest cards
- **🔄 Check for Existing Cards** - Loads previously scraped cards
- **📁 Load Database File** - Manual upload option (Manual Upload tab)
- **✖ Hide Setup** - Hides the setup section (appears when cards are loaded)

#### Quiz Controls
- **🔄 Update Cards** - Shows the scraper section to update card database
- **🔀 Randomize** - Shuffles the current card order
- **🔄 Reset Progress** - Clears mastered cards counter

### Scraper Options

Run the scraper standalone:

```bash
# Default headless mode (fastest)
python riftbound_scraper.py

# Show browser window (for debugging)
python riftbound_scraper.py --show-browser

# Custom output file
python riftbound_scraper.py --output my_cards.json
```

### Learning Modes

#### Self Learn Mode
- Click cards to flip and reveal descriptions
- Use arrow keys to navigate
- Space bar flips the current card

#### Name Quiz Mode
- Card shown with name hidden
- Type the card name and press Enter
- Auto-advances on correct answer

#### Cost Quiz Mode
- Card shown with cost hidden
- Enter the cost number
- Requires cost data in the card database

### Keyboard Shortcuts

- **←/→** - Navigate between cards
- **Space** - Flip card (Self Learn mode only)
- **Enter** - Submit answer (Quiz modes)

## User Interface Flow

### Clean Learning Experience
1. **First Visit**: Scraper section visible → Load cards → Auto-hides
2. **Return Visit**: Cards auto-load → Straight to learning
3. **Update Cards**: Click "Update Cards" → Scraper appears
4. **Hide Again**: Click "✖ Hide Setup" → Back to clean interface

The interface adapts to your needs, showing setup options only when necessary.

## Card Database Format

The scraper generates JSON with this structure:

```json
[
  {
    "id": 1,
    "name": "Jinx",
    "image": "https://...",
    "text": "Full alt text with card details",
    "colors": ["Red", "Purple"],
    "colorString": "Red, Purple"
  }
]
```

### Supported Colors
- Red
- Blue  
- Green
- Purple
- Orange
- Yellow

## Troubleshooting

### "Could not connect to server"
- Ensure Flask server is running
- Check port 5000 isn't blocked
- Try accessing http://localhost:5000 directly

### "Timeout waiting for selector"
- Website structure may have changed
- Run with `--show-browser` to see what's happening
- Check the debug output for image counts

### "No cards found"
- Check internet connection
- Try running scraper manually to see errors
- Verify the website is accessible

### Slow Performance
- Use headless mode (default)
- Close other browser instances
- Ensure good internet connection

## Advanced Configuration

### Using Different Port

Edit `riftbound_server.py`:
```python
app.run(debug=True, port=5000)  # Change port number
```

### Updating Card Selectors

If the website changes, update the selector in `riftbound_scraper.py`:
```python
# Current selector
'img[alt*="Color:"]'
```

### Adding Cost Data

To enable Cost Quiz mode, update the scraper to extract cost information and add a `cost` field to each card in the database.

## Development

### Adding New Features

The system is modular:
- **Scraper**: Add new data extraction in `extract_card_info_batch()`
- **Server**: Add new endpoints in `riftbound_server.py`
- **Frontend**: Add new modes in the `displayCard()` function

### Debug Mode

For detailed scraping logs:
```python
logging.basicConfig(level=logging.DEBUG)
```

## Performance Tips

1. **Always use headless mode** for production
2. **Close unnecessary applications** during scraping
3. **Use "Update Cards" button** instead of refreshing page
4. **Filter cards** to reduce rendering load
5. **Hide setup section** after loading cards for cleaner interface

## Security Note

This server is for local development only. Do not expose to the internet without proper security measures.

## License

For educational purposes only. Respect the website's terms of service.

## Changelog

### Latest Version
- Added "Hide Setup" button for cleaner interface control
- Migrated from Selenium to Playwright (2-3x faster)
- Added three learning modes
- Auto-hide scraper interface
- Improved error handling and debugging
- Fixed color extraction regex
- Added "Update Cards" button